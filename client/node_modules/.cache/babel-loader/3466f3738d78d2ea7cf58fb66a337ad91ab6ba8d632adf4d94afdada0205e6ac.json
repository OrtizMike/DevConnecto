{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR } from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// Register User\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\n\n// Login User\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","LOGIN_SUCCESS","LOGIN_FAIL"],"sources":["/Users/miguelortiz/Bonzzu/Courses/BackEnd-Dev-Mern/DevConnecto/client/src/actions/auth.js"],"sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    USER_LOADED,\n    AUTH_ERROR\n} from './types';\nimport setAuthToken from '../utils/setAuthToken';\n\n// Load User\nexport const loadUser = () => async dispatch => {\n    if(localStorage.token) {\n        setAuthToken(localStorage.token);\n    }\n\n    try {\n        const res = await axios.get('/api/auth');\n        dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: AUTH_ERROR\n        });\n    }\n}\n\n\n// Register User\nexport const register = ({ name, email, password }) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    const body = JSON.stringify({ name, email, password });\n\n    try {\n        const res = await axios.post('/api/users', body, config);\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        })\n    } catch (err) {\n        const errors = err.response.data.errors;\n        if(errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n\n        dispatch({\n            type: REGISTER_FAIL\n        })\n    }\n}\n\n\n\n// Login User\nexport const login = (email, password) => async dispatch => {\nconst config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    const body = JSON.stringify({ email, password });\n\n    try {\n        const res = await axios.post('/api/auth', body, config);\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        })\n    } catch (err) {\n        const errors = err.response.data.errors;\n        if(errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n\n        dispatch({\n            type: LOGIN_FAIL\n        })\n    }\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,SAAS;AAClC,SACIC,gBAAgB,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,QACP,SAAS;AAChB,OAAOC,YAAY,MAAM,uBAAuB;;AAEhD;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM,MAAMC,QAAQ,IAAI;EAC5C,IAAGC,YAAY,CAACC,KAAK,EAAE;IACnBJ,YAAY,CAACG,YAAY,CAACC,KAAK,CAAC;EACpC;EAEA,IAAI;IACA,MAAMC,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,WAAW,CAAC;IACxCJ,QAAQ,CAAC;MACLK,IAAI,EAAET,WAAW;MACjBU,OAAO,EAAEH,GAAG,CAACI;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOC,GAAG,EAAE;IACVR,QAAQ,CAAC;MACLK,IAAI,EAAER;IACV,CAAC,CAAC;EACN;AACJ,CAAC;;AAGD;AACA,OAAO,MAAMY,QAAQ,GAAGA,CAAC;EAAEC,IAAI;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK,MAAMZ,QAAQ,IAAI;EACrE,MAAMa,MAAM,GAAG;IACXC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC;EAED,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;IAAEP,IAAI;IAAEC,KAAK;IAAEC;EAAS,CAAC,CAAC;EAEtD,IAAI;IACA,MAAMT,GAAG,GAAG,MAAMX,KAAK,CAAC0B,IAAI,CAAC,YAAY,EAAEH,IAAI,EAAEF,MAAM,CAAC;IACxDb,QAAQ,CAAC;MACLK,IAAI,EAAEX,gBAAgB;MACtBY,OAAO,EAAEH,GAAG,CAACI;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOC,GAAG,EAAE;IACV,MAAMW,MAAM,GAAGX,GAAG,CAACY,QAAQ,CAACb,IAAI,CAACY,MAAM;IACvC,IAAGA,MAAM,EAAE;MACPA,MAAM,CAACE,OAAO,CAACC,KAAK,IAAItB,QAAQ,CAACP,QAAQ,CAAC6B,KAAK,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IACpE;IAEAvB,QAAQ,CAAC;MACLK,IAAI,EAAEV;IACV,CAAC,CAAC;EACN;AACJ,CAAC;;AAID;AACA,OAAO,MAAM6B,KAAK,GAAGA,CAACb,KAAK,EAAEC,QAAQ,KAAK,MAAMZ,QAAQ,IAAI;EAC5D,MAAMa,MAAM,GAAG;IACPC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC;EAED,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;IAAEN,KAAK;IAAEC;EAAS,CAAC,CAAC;EAEhD,IAAI;IACA,MAAMT,GAAG,GAAG,MAAMX,KAAK,CAAC0B,IAAI,CAAC,WAAW,EAAEH,IAAI,EAAEF,MAAM,CAAC;IACvDb,QAAQ,CAAC;MACLK,IAAI,EAAEoB,aAAa;MACnBnB,OAAO,EAAEH,GAAG,CAACI;IACjB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOC,GAAG,EAAE;IACV,MAAMW,MAAM,GAAGX,GAAG,CAACY,QAAQ,CAACb,IAAI,CAACY,MAAM;IACvC,IAAGA,MAAM,EAAE;MACPA,MAAM,CAACE,OAAO,CAACC,KAAK,IAAItB,QAAQ,CAACP,QAAQ,CAAC6B,KAAK,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IACpE;IAEAvB,QAAQ,CAAC;MACLK,IAAI,EAAEqB;IACV,CAAC,CAAC;EACN;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}